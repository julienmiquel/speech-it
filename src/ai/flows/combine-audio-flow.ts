'use server';
/**
 * @fileOverview An AI agent for combining audio files.
 *
 * - combineAudio - A function that combines multiple WAV audio chunks into one.
 * - CombineAudioInput - The input type for the combineAudio function.
 * - CombineAudioOutput - The return type for the combineAudio function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const CombineAudioInputSchema = z.array(z.string().describe("A WAV audio file as a data URI. Expected format: 'data:audio/wav;base64,<encoded_data>'."));
export type CombineAudioInput = z.infer<typeof CombineAudioInputSchema>;

const CombineAudioOutputSchema = z.object({
  media: z.string().describe("The combined audio as a data URI. Expected format: 'data:audio/wav;base64,<encoded_data>'."),
});
export type CombineAudioOutput = z.infer<typeof CombineAudioOutputSchema>;


export async function combineAudio(input: CombineAudioInput): Promise<CombineAudioOutput> {
  return combineAudioFlow(input);
}

const combineAudioFlow = ai.defineFlow(
  {
    name: 'combineAudioFlow',
    inputSchema: CombineAudioInputSchema,
    outputSchema: CombineAudioOutputSchema,
  },
  async (audioDataUris) => {
    if (audioDataUris.length === 0) {
      throw new Error("Cannot combine audio from an empty list.");
    }
     if (audioDataUris.length === 1) {
      return { media: audioDataUris[0] };
    }

    const buffers = audioDataUris.map(uri => Buffer.from(uri.substring(uri.indexOf(',') + 1), 'base64'));
    
    // Assuming a standard 44-byte header for WAV files generated by the TTS service.
    const HEADER_LENGTH = 44;

    const header = buffers[0].slice(0, HEADER_LENGTH);
    const audioData = buffers.map(buffer => buffer.slice(HEADER_LENGTH));
    
    const combinedAudioData = Buffer.concat(audioData);
    
    const newHeader = Buffer.from(header);
    
    // Update Subchunk2Size (data size) at offset 40
    newHeader.writeUInt32LE(combinedAudioData.length, 40);
    // Update ChunkSize (total size - 8) at offset 4
    newHeader.writeUInt32LE(36 + combinedAudioData.length, 4);

    const combinedWavBuffer = Buffer.concat([newHeader, combinedAudioData]);

    return {
      media: 'data:audio/wav;base64,' + combinedWavBuffer.toString('base64'),
    };
  }
);
